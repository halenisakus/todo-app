{"version":3,"sources":["components/Navbar.js","components/Card.js","components/Column.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","showForm","this","props","className","value","onClick","type","name","PureComponent","Card","console","log","cards","map","card","i","key","header","class","aria-hidden","style","cursor","text","tag","date","Column","groups","group","groupId","groupName","Main","ifClickEvent","ifClickGroup","eventHeader","handleChange","eventContent","eventDate","eventTags","handleSubmit","groupNameInput","addGroup","htmlFor","onChange","val","App","state","eventGroupName","imgSrc","tags","bind","e","index","oldCard","newCard","push","setState","preventDefault","length","newGroups","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d9a409b0.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../styles/Navbar.scss';\r\n\r\nclass Navbar extends PureComponent {\r\n  render() {\r\n    const { showForm } = this.props;\r\n    return (\r\n      <header className=\"header\">\r\n        <div className=\"header-logo\">Card-App</div>\r\n        <nav className=\"header-menu\">\r\n          <button\r\n            value=\"ifClickEvent\"\r\n            onClick={showForm}\r\n            type=\"button\"\r\n            className=\"header-menu-button\"\r\n            name=\"ifClickEvent\"\r\n          >\r\n            Etkinlik Ekle\r\n          </button>\r\n          <button\r\n            onClick={showForm}\r\n            value=\"ifClickGroup\"\r\n            name=\"ifClickGroup\"\r\n            type=\"button\"\r\n            className=\"header-menu-button\"\r\n          >\r\n            Grup Ekle\r\n          </button>\r\n        </nav>\r\n      </header>\r\n    );\r\n  }\r\n}\r\nNavbar.propTypes = {\r\n  showForm: PropTypes.func.isRequired,\r\n};\r\nexport default Navbar;","import React from \"react\"\r\nimport \"../styles/Card.scss\"\r\n\r\n\r\nfunction Card(props) {\r\n    console.log(props);\r\n    const { cards } = props\r\n    return (\r\n         cards.map((card, i) => {\r\n             return (\r\n            <div key={card.header + i} className=\"card\" >\r\n            <div className=\"trash-icon\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\" style={{cursor:\"pointer\"}}></i></div>\r\n                <div className=\"card-left\" >\r\n                <div className=\"card-left-header\">{card.header}</div>\r\n                <div className=\"card-left-text\">{card.text}</div>\r\n            <div className=\"card-left-tag\">{card.tag}</div>\r\n           </div>\r\n           \r\n          <div className=\"card-right\">\r\n            <div className=\"card-right-image\">IMG</div>\r\n            <div className=\"card-right-date\">{card.date}</div>\r\n            <div  > </div>\r\n          </div>\r\n        </div>\r\n             )\r\n         })\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"../styles/Column.scss\";\r\n\r\nfunction Column({ groups }) {\r\n  console.log(groups);\r\n  return groups.map((group) => {\r\n    return (\r\n      <section className=\"column\" key={group.groupId}>\r\n        <h2 className=\"column-header\">{group.groupName}</h2>\r\n        <Card cards={group.cards} />\r\n      </section>\r\n    );\r\n  });\r\n}\r\n\r\nexport default Column;","// import React, { PureComponent } from 'react';\r\n\r\n// class Main extends PureComponent {\r\n//   render() {\r\n//     return (\r\n//       <main className=\"main\">\r\n//         <div>{this.props.groups[0].groupName}</div>\r\n//       </main>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Main;\r\n\r\nimport React from 'react';\r\nimport Column from './Column';\r\nimport '../styles/Main.scss';\r\n\r\nexport function Main(props) {\r\n  console.log(props);\r\n  const {\r\n    ifClickEvent,\r\n    ifClickGroup,\r\n    groups,\r\n    eventHeader,\r\n    handleChange,\r\n    eventContent,\r\n    eventDate,\r\n    eventTags,\r\n    handleSubmit,\r\n    groupNameInput,\r\n    addGroup,\r\n  } = props;\r\n  return (\r\n    <main className=\"main\">\r\n      <Column groups={groups} />\r\n      <div>\r\n        <div className={'main-form' + (ifClickGroup ? '-show' : ' ')}>\r\n          <label htmlFor=\"GroupName\" className=\"main-form-show-label\">\r\n            Grup ismi\r\n            <input\r\n              name=\"groupNameInput\"\r\n              value={groupNameInput}\r\n              type=\"text\"\r\n              onChange={handleChange}\r\n              className=\"main-form-show-input\"\r\n            />\r\n          </label>\r\n          <input\r\n            onClick={addGroup}\r\n            type=\"Submit\"\r\n            value={\"Ekle\"}\r\n            className=\"main-form-show-submit\"\r\n          />\r\n        </div>\r\n        <form className={'main-form' + (ifClickEvent ? '-show' : ' ')}>\r\n          <label htmlFor=\"baslik\" className=\"main-form-show-label\">\r\n            Etkinlik Basligi\r\n            <input\r\n              name=\"eventHeader\"\r\n              onChange={handleChange}\r\n              type=\"text\"\r\n              className=\"main-form-show-input\"\r\n              value={eventHeader}\r\n            />\r\n          </label>\r\n          <label htmlFor=\"icerik\" className=\"main-form-show-label\">\r\n            Etkinlik Icerigi\r\n            <textarea\r\n              name=\"eventContent\"\r\n              type=\"text\"\r\n              className=\"main-form-show-input\"\r\n              onChange={handleChange}\r\n              value={eventContent}\r\n            />\r\n          </label>\r\n          <label htmlFor=\"tarih\" className=\"main-form-show-label\">\r\n            Tarih\r\n            <input\r\n              onChange={handleChange}\r\n              value={eventDate}\r\n              name=\"eventDate\"\r\n              type=\"date\"\r\n            />\r\n          </label>\r\n          <label htmlFor=\"etiket\" className=\"main-form-show-label\">\r\n            Etiket\r\n            <select onChange={handleChange} name=\"eventTags\" value={eventTags}>\r\n              <option value=\"2\">Dusuk</option>\r\n              <option value=\"3\">Orta</option>\r\n              <option value=\"4\">Yuksek</option>\r\n            </select>\r\n          </label>\r\n          <label htmlFor=\"group\" className=\"main-form-show-label\">\r\n            Grup\r\n            <select\r\n              onChange={handleChange}\r\n              name=\"eventGroupName\"\r\n              className=\"main-form-show-select\"\r\n            >\r\n              {groups.map((val) => {\r\n                return <option key={val.groupId} value={val.groupName}>{val.groupName}</option>;\r\n              })}\r\n            </select>\r\n          </label>\r\n          <input onClick={handleSubmit} className=\"main-form-show-submit\" type=\"submit\" value=\"Ekle\" />\r\n        </form>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport { Main} from './components/Main';\nimport './App.css';\n//import I from 'immutable';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ifClickEvent: 0,\n      ifClickGroup: 0,\n      groupNameInput: '',\n      eventHeader: '',\n      eventContent: '',\n      eventTags: '2',\n      eventDate: '',\n      eventGroupName: 'Okul',\n      // todo Buradaki Default deger dinamiklesecek\n      groups: [\n        {\n          groupId: 1,\n          groupName: 'Okul',\n          cards: [\n            {\n              header: 'Odev',\n              text: 'Okul Odevlerini Yapmayi iniutma',\n              imgSrc: '',\n              date: '29-06-2020',\n              tags: 1,\n            },\n            {\n              header: 'Proje Teslimi',\n              text: 'Oyun Programlama odevi teslim edilecek',\n              imgSrc: '',\n              date: '30-06-2020',\n              tags: 1,\n            },\n          ],\n        },\n        {\n          groupId: 2,\n          groupName: 'Is',\n          cards: [\n            {\n              header: 'Scrum Bulusmasi',\n              text: 'Okul Odevlerini Yapmayi Unutma',\n              imgSrc: '',\n              date: '29-06-2020',\n              tag: 2,\n            },\n          ],\n        },\n        {\n          groupId: 3,\n          groupName: 'Haftasonu',\n          cards: [\n            {\n              header: 'Piknik',\n              text:\n                'aOkul arkadaslari ile beraber piknige gidilecek. Haftasonuna kadar isleri hallet',\n              imgSrc: '',\n              date: '01-07-2020',\n              tag: 3,\n            },\n          ],\n        },\n        {\n          groupId: 8,\n          groupName: 'E-spor',\n          cards: [],\n        },\n      ],\n    };\n    this.showForm = this.showForm.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.addGroup = this.addGroup.bind(this);\n  }\n\n\n\n  handleSubmit(e) {\n    const { groups } = this.state;\n    const {\n      eventHeader,\n      eventContent,\n      eventDate,\n      eventTags,\n      eventGroupName,\n    } = this.state;\n    let index;\n    // eslint-disable-next-line array-callback-return\n    groups.map((val, i) => {\n      console.log('val', val.groupName);\n      console.log('eventGroupName', eventGroupName);\n      if (val.groupName === eventGroupName) {\n        console.log(i);\n        index = i;\n      }\n    });\n    //Immutable\n    const oldCard = groups[index].cards;\n    console.log('oldCard eski hali', groups[index].cards);\n    const newCard = {\n      header: eventHeader,\n      text: eventContent,\n      imgSrc: '',\n      date: eventDate,\n      tag: eventTags,\n    };\n    // Immutable\n    oldCard.push(newCard);\n    console.log('oldCard yeni Cikstisi', newCard);\n    this.setState({\n      groups:groups,\n      eventHeader: '',\n      eventContent: '',\n      eventDate: '',\n      eventTags: 2,\n      eventGroupName: 'Okul',\n      // ifClickEvent: 0,\n    });\n    e.preventDefault();\n  }\n\n  addGroup(e) {\n    // const { name, value } = e.target;\n    const { groups, groupNameInput } = this.state;\n    console.log(groups.length);\n    let lastGroup = groups[groups.length - 1]; // groups[3]\n    const newGroupId = lastGroup.groupId + 1;\n    const newGroups = {\n      groupId: newGroupId,\n      groupName: groupNameInput,\n      cards: [],\n    };\n    // ToDo Immutable\n    groups.push(newGroups);\n    this.setState({ groups:groups, groupNameInput: '', ifClickGroup: 0 });\n    e.preventDefault();\n  }\n\n  handleChange(e) {\n    console.log('name', e.target.name);\n    console.log('value', e.target.value);\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  showForm(e) {\n    console.log(e.target.name);\n    const { name } = e.target;\n    const { ifClickEvent, ifClickGroup } = this.state;\n    let val;\n    if (name === 'ifClickEvent') {\n      val = ifClickEvent;\n    } else if (name === 'ifClickGroup') {\n      val = ifClickGroup;\n    }\n    this.setState({ [name]: !val });\n  }\n\n  render() {\n    //console.log((I.Map(this.state.groups2.get(2)).set('groupIda','asd')).toJS());\n    const {\n      groups,\n      ifClickEvent,\n      eventContent,\n      eventDate,\n      eventHeader,\n      eventTags,\n      ifClickGroup,\n      groupNameInput,\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <Navbar showForm={this.showForm} />\n        <Main\n          groupNameInput={groupNameInput}\n          ifClickEvent={ifClickEvent}\n          ifClickGroup={ifClickGroup}\n          groups={groups}\n          eventContent={eventContent}\n          eventDate={eventDate}\n          eventHeader={eventHeader}\n          eventTags={eventTags}\n          addGroup={this.addGroup}\n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n\n        />\n      </div>\n    );\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <Navbar />\n//       <h1>Selam</h1>\n//     </div>\n//   );\n// }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}